#ifndef CHECKSUM_H
#define CHECKSUM_H

#include "stdint.h"
#include <QtGui>

//CRC列表
const quint8 crc_8_tab[] = {
0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 65,
157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220,
35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98,
190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158, 29, 67, 161, 255,
70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56, 102, 229, 187, 89, 7,
219, 133, 103, 57, 186, 228, 6, 88, 25, 71, 165, 251, 120, 38, 196, 154,
101, 59, 217, 135, 4, 90, 184, 230, 167, 249, 27, 69, 198, 152, 122, 36,
248, 166, 68, 26, 153, 199, 37, 123, 58, 100, 134, 216, 91, 5, 231, 185,
140, 210, 48, 110, 237, 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205,
17, 79, 173, 243, 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80,
175, 241, 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238,
50, 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45, 115,
202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139,
87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22,
233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168,
116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53};
	

/*
 * @brief 计算校验和 
 *
 * @param Value 接收的数据。每次只计算一个数据，最后的结果即整个数据包的CRC
 * @param Prev_CRC 上一个数据对应的CRC。参与当前数据CRC的计算
 * @return T_CRC 当前这个数据的CRC
 */

static quint8 Calculate_CRC(quint8 Value, quint8 Prev_CRC)
{ 
    quint8 T_CRC = 0;
	Value = Value ^ Prev_CRC;		//计算公式
	T_CRC = crc_8_tab[Value];		//从CRC列表中获取对应的CRC
  return(T_CRC);
}


/*
 * @brief 获取两个ID、Length、Data的校验和，得到[High_TX_CRC]和[Low_TX_CRC]，各4位（半字节） 
 *
 * @param Buffer 缓冲数组,与包对应
 * @param package_num 包的编号，表征缓冲数组中待检验的数据长度。所谓待检验的数据，就是Buffer中校验位之前的所有字节
 * 每种包都有固定的帧长度，所以只要包确定了，这个长度就是已知的：包1-12，包2-29，包3BASE-77，包4ADD-129
 * @return TX_CRC即最后需要的校验和，但注意是一个字节，在helper.h中会拆分为两个字节保存
 */
static quint8 Get_CRC(quint8 Buffer[], quint8 package_num)
{
    quint8 TX_CRC = 0;
    quint8 length = 0;		//待检验的数据长度
	switch(package_num)
	{
		case 1:
            length = 15;
		break;
		case 2:
            length = 32;
		break;
		case 3:
			length = 77;
		break;
		case 4:
			length = 129;
		break;
	}
	
    for(quint8 i=0; i<length; i++)
	{
		TX_CRC = Calculate_CRC(Buffer[i], TX_CRC);
	}
	
	return TX_CRC;
}


#endif
